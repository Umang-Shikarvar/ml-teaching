{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "---\n",
    "author: Rahul Chembakasseril\n",
    "badges: true\n",
    "categories:\n",
    "- ML\n",
    "- Tutorial\n",
    "date: '2024-01-11'\n",
    "title: Hyperparams Tuning Strategies Experimentation\n",
    "toc: true\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "np.random.seed(20)\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "# Retina display\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "%matplotlib inline\n",
    "from latexify import latexify, format_axes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MakeMoons Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.1 Fixed Train-Test (70:30) split ; No Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.datasets import make_moons\n",
    "\n",
    "# Generate the dataset\n",
    "X, y = make_moons(n_samples=1000, noise=0.3, random_state=42)\n",
    "\n",
    "# Split the data into training, validation, and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x17a965e40>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 350,
       "width": 445
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "latexify(fig_width=5, fig_height=4)\n",
    "plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, label='Train') \n",
    "plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, marker='x', label='Test')\n",
    "format_axes(plt.gca())\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(700, 300)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train), len(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set accuracy: 0.8933\n"
     ]
    }
   ],
   "source": [
    "#hyperparameters take their default values\n",
    "dt_classifier = DecisionTreeClassifier(random_state=42)\n",
    "dt_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "test_accuracy = dt_classifier.score(X_test, y_test)\n",
    "print(\"Test set accuracy: {:.4f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.2 Multiple Random Train-Test splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean accuracy: 0.8800\n",
      "Standard deviation: 0.0211\n",
      "Minimum accuracy: 0.8400\n",
      "Maximum accuracy: 0.9133\n"
     ]
    }
   ],
   "source": [
    "# Initialize an empty list to store the accuracy metrics\n",
    "accuracy_metrics = []\n",
    "all_test_sets = []\n",
    "all_predictions = []\n",
    "\n",
    "X_tests = []\n",
    "\n",
    "# Perform 10 random train-test splits and repeat the fit\n",
    "for _ in range(10):\n",
    "    # Split the data into training and test sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=np.random.randint(100))\n",
    "    X_tests.append(X_test)\n",
    "    # Create and fit the decision tree classifier\n",
    "    dt_classifier = DecisionTreeClassifier(random_state=42)\n",
    "    dt_classifier.fit(X_train, y_train)\n",
    "\n",
    "    current_predictions = dt_classifier.predict(X_test)\n",
    "    all_predictions.append(current_predictions)\n",
    "    current_accuracy = np.mean(current_predictions == y_test)\n",
    "    all_test_sets.append(y_test)\n",
    "    \n",
    "    # Calculate the accuracy on the test set\n",
    "    test_accuracy = dt_classifier.score(X_test, y_test)\n",
    "    \n",
    "    # Append the accuracy to the list\n",
    "    accuracy_metrics.append(test_accuracy)\n",
    "\n",
    "# Calculate the mean and standard deviation of the accuracy metrics\n",
    "mean_accuracy = np.mean(accuracy_metrics)\n",
    "std_accuracy = np.std(accuracy_metrics)\n",
    "\n",
    "# Print the mean and standard deviation\n",
    "print(\"Mean accuracy: {:.4f}\".format(mean_accuracy))\n",
    "print(\"Standard deviation: {:.4f}\".format(std_accuracy))\n",
    "\n",
    "# Print minimum and maximum accuracies\n",
    "print(\"Minimum accuracy: {:.4f}\".format(min(accuracy_metrics)))\n",
    "print(\"Maximum accuracy: {:.4f}\".format(max(accuracy_metrics)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of unique test samples: 964\n",
      "Ideally we wanted 1000 unique test samples\n"
     ]
    }
   ],
   "source": [
    "# Find number of unique element in X_tests\n",
    "found_unique_test_samples = len(np.unique(np.concatenate(X_tests), axis=0))\n",
    "print(f\"Number of unique test samples: {found_unique_test_samples}\")\n",
    "print(f\"Ideally we wanted {len(X)} unique test samples\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.3 K-Fold Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200\n",
      "200\n",
      "200\n",
      "200\n",
      "200\n",
      "Fold 1: Accuracy: 0.8700\n",
      "Fold 2: Accuracy: 0.8850\n",
      "Fold 3: Accuracy: 0.9300\n",
      "Fold 4: Accuracy: 0.8650\n",
      "Fold 5: Accuracy: 0.8850\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "# Define the number of folds (k)\n",
    "k = 5\n",
    "\n",
    "# Initialize lists to store predictions and accuracies\n",
    "predictions = {}\n",
    "accuracies = []\n",
    "\n",
    "# Calculate the size of each fold\n",
    "fold_size = len(X) // k\n",
    "\n",
    "# Perform k-fold cross-validation\n",
    "for i in range(k):\n",
    "    # Split the data into training and test sets\n",
    "    test_start = i * fold_size\n",
    "    test_end = (i + 1) * fold_size\n",
    "    test_set = X[test_start:test_end]\n",
    "    test_labels = y[test_start:test_end]\n",
    "    \n",
    "    training_set = np.concatenate((X[:test_start], X[test_end:]), axis=0)\n",
    "    print(len(test_set))\n",
    "    training_labels = np.concatenate((y[:test_start], y[test_end:]), axis=0)\n",
    "    \n",
    "    # Train the model\n",
    "    dt_classifier = DecisionTreeClassifier(random_state=42)\n",
    "    dt_classifier.fit(training_set, training_labels)\n",
    "    \n",
    "    # Make predictions on the validation set\n",
    "    fold_predictions = dt_classifier.predict(test_set)\n",
    "    \n",
    "    # Calculate the accuracy of the fold\n",
    "    fold_accuracy = np.mean(fold_predictions == test_labels)\n",
    "    \n",
    "    # Store the predictions and accuracy of the fold\n",
    "    predictions[i] = fold_predictions\n",
    "    accuracies.append(fold_accuracy)\n",
    "\n",
    "# Print the predictions and accuracies of each fold\n",
    "for i in range(k):\n",
    "    print(\"Fold {}: Accuracy: {:.4f}\".format(i+1, accuracies[i]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200\n",
      "Fold 1: Accuracy: 0.8700\n",
      "200\n",
      "Fold 2: Accuracy: 0.8850\n",
      "200\n",
      "Fold 3: Accuracy: 0.9300\n",
      "200\n",
      "Fold 4: Accuracy: 0.8650\n",
      "200\n",
      "Fold 5: Accuracy: 0.8850\n"
     ]
    }
   ],
   "source": [
    "from cgi import test\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# Define the number of folds (k)\n",
    "k = 5\n",
    "\n",
    "# Initialize lists to store predictions and accuracies\n",
    "predictions = {}\n",
    "accuracies = []\n",
    "\n",
    "# Create a KFold instance\n",
    "kf = KFold(n_splits=k, shuffle=False)\n",
    "\n",
    "# Perform k-fold cross-validation\n",
    "for i, (train_index, test_index) in enumerate(kf.split(X)):\n",
    "    # Split the data into training and test sets\n",
    "    training_set, test_set = X[train_index], X[test_index]\n",
    "    print(len(test_set))\n",
    "    training_labels, test_labels = y[train_index], y[test_index]\n",
    "    \n",
    "    # Train the model\n",
    "    dt_classifier = DecisionTreeClassifier(random_state=42)\n",
    "    dt_classifier.fit(training_set, training_labels)\n",
    "    \n",
    "    # Make predictions on the validation set\n",
    "    fold_predictions = dt_classifier.predict(test_set)\n",
    "    \n",
    "    # Calculate the accuracy of the fold\n",
    "    fold_accuracy = np.mean(fold_predictions == test_labels)\n",
    "    \n",
    "    # Store the predictions and accuracy of the fold\n",
    "    predictions[i] = fold_predictions\n",
    "    accuracies.append(fold_accuracy)\n",
    "\n",
    "    # Print the predictions and accuracy of each fold\n",
    "    print(\"Fold {}: Accuracy: {:.4f}\".format(i+1, fold_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Micro and Macro Averaging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Method 1 accuracy: 0.8870\n",
      "Method2 accuracy: 0.8870\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Method 1 for computing accuracy\n",
    "accuracy_1 = accuracy_score(y, np.concatenate(list(predictions.values())))\n",
    "\n",
    "# Calculate macro-averaged accuracy\n",
    "accuracy_2 = np.mean(accuracies)\n",
    "\n",
    "# Print the micro and macro averaged accuracy\n",
    "print(\"Method 1 accuracy: {:.4f}\".format(accuracy_1))\n",
    "print(\"Method2 accuracy: {:.4f}\".format(accuracy_2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.1 Fixed Train-Test Split (hyperparameters tuned on Validation set)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.1.1 Validation Set as fixed Subset of Training Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: Split the data into training, validation, and test sets\n",
    "X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.285, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training examples: 500\n",
      "Number of validation examples: 200\n",
      "Number of testing examples: 300\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of training examples: {}\".format(len(X_train)))\n",
    "print(\"Number of validation examples: {}\".format(len(X_val)))\n",
    "print(\"Number of testing examples: {}\".format(len(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperparameters = {}\n",
    "hyperparameters['max_depth'] = [1,2,3,4,5,6,7,8,9,10]\n",
    "hyperparameters['min_samples_split'] = [2,3,4,5,6,7,8]\n",
    "hyperparameters['criteria_values'] = ['gini', 'entropy']\n",
    "\n",
    "best_accuracy = 0\n",
    "best_hyperparameters = {}\n",
    "\n",
    "out = {}\n",
    "count = 0\n",
    "for max_depth in hyperparameters['max_depth']:\n",
    "    for min_samples_split in hyperparameters['min_samples_split']:\n",
    "        for criterion in hyperparameters['criteria_values']:\n",
    "            # Create and fit the decision tree classifier with the current hyperparameters\n",
    "            dt_classifier = DecisionTreeClassifier(max_depth=max_depth, min_samples_split=min_samples_split, criterion=criterion, random_state=42)\n",
    "            dt_classifier.fit(X_train, y_train)\n",
    "            \n",
    "            # Evaluate the performance on the validation set\n",
    "            val_accuracy = dt_classifier.score(X_val, y_val)\n",
    "            out[count] = {'max_depth': max_depth, 'min_samples_split': min_samples_split, 'criterion': criterion, 'val_accuracy': val_accuracy}\n",
    "            count += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>min_samples_split</th>\n",
       "      <th>criterion</th>\n",
       "      <th>val_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.895</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>140 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    max_depth min_samples_split criterion val_accuracy\n",
       "0           1                 2      gini        0.785\n",
       "1           1                 2   entropy        0.785\n",
       "2           1                 3      gini        0.785\n",
       "3           1                 3   entropy        0.785\n",
       "4           1                 4      gini        0.785\n",
       "..        ...               ...       ...          ...\n",
       "135        10                 6   entropy        0.895\n",
       "136        10                 7      gini         0.89\n",
       "137        10                 7   entropy        0.895\n",
       "138        10                 8      gini        0.885\n",
       "139        10                 8   entropy        0.895\n",
       "\n",
       "[140 rows x 4 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hparam_df = pd.DataFrame(out).T\n",
    "hparam_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>min_samples_split</th>\n",
       "      <th>criterion</th>\n",
       "      <th>val_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.915</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max_depth min_samples_split criterion val_accuracy\n",
       "76         6                 5      gini        0.925\n",
       "77         6                 5   entropy        0.925\n",
       "78         6                 6      gini        0.925\n",
       "79         6                 6   entropy        0.925\n",
       "80         6                 7      gini        0.925\n",
       "81         6                 7   entropy        0.925\n",
       "83         6                 8   entropy        0.925\n",
       "70         6                 2      gini         0.92\n",
       "82         6                 8      gini         0.92\n",
       "90         7                 5      gini        0.915"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hparam_df.sort_values(by='val_accuracy', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ensure dtype of val_accuracy is float\n",
    "hparam_df['val_accuracy'] = hparam_df['val_accuracy'].astype(float)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_hyperparameters_row = hparam_df.iloc[hparam_df['val_accuracy'].idxmax()]\n",
    "best_accuracy = best_hyperparameters_row['val_accuracy']\n",
    "best_hyperparameters = best_hyperparameters_row[['max_depth', 'min_samples_split', 'criterion']].to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 6, 'min_samples_split': 5, 'criterion': 'gini'}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters: {'max_depth': 6, 'min_samples_split': 5, 'criterion': 'gini'}\n",
      "Validation Set accuracy: 0.9250\n",
      "Test Set accuracy: 0.9067\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the performance of the selected hyperparameter combination on the test set\n",
    "dt_classifier = DecisionTreeClassifier(max_depth=best_hyperparameters['max_depth'], \n",
    "                                       min_samples_split=best_hyperparameters['min_samples_split'], \n",
    "                                       criterion=best_hyperparameters['criterion'], \n",
    "                                       random_state=42)\n",
    "dt_classifier.fit(X_train_val, y_train_val)\n",
    "test_accuracy = dt_classifier.score(X_test, y_test)\n",
    "\n",
    "print(\"Best Hyperparameters:\", best_hyperparameters)\n",
    "print(\"Validation Set accuracy: {:.4f}\".format(best_accuracy))\n",
    "print(\"Test Set accuracy: {:.4f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avoiding nested loops by using itertools.product\n",
    "\n",
    "```python\n",
    "for max_depth in hyperparameters['max_depth']:\n",
    "    for min_samples_split in hyperparameters['min_samples_split']:\n",
    "        for criterion in hyperparameters['criteria_values']:\n",
    "            # Create and fit the decision tree classifier with the current hyperparameters\n",
    "            dt_classifier = DecisionTreeClassifier(max_depth=max_depth, min_samples_split=min_samples_split, criterion=criterion, random_state=42)\n",
    "            dt_classifier.fit(X_train, y_train)\n",
    "            \n",
    "            # Evaluate the performance on the validation set\n",
    "            val_accuracy = dt_classifier.score(X_val, y_val)\n",
    "            out[count] = {'max_depth': max_depth, 'min_samples_split': min_samples_split, 'criterion': criterion, 'val_accuracy': val_accuracy}\n",
    "            count += 1\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from itertools import product\n",
    "\n",
    "for max_depth, min_samples_split, criterion in product(hyperparameters['max_depth'], hyperparameters['min_samples_split'], hyperparameters['criteria_values']):\n",
    "    # Define the Decision Tree Classifier\n",
    "    dt_classifier = DecisionTreeClassifier(\n",
    "        max_depth=max_depth,\n",
    "        min_samples_split=min_samples_split,\n",
    "        criterion=criterion,\n",
    "        random_state=42\n",
    "    )\n",
    "    dt_classifier.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.1.2 Multiple random subsets of Training Set used as Validation Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal hyperparameters for 5 inner folds/validation sets\n",
      "\n",
      "Optimal hyperparameters for validation set 1: {'max_depth': 7, 'min_samples_split': 6, 'criterion': 'entropy'}\n",
      "Test Accuracy for validation set 1: 0.9000\n",
      "Optimal hyperparameters for validation set 2: {'max_depth': 5, 'min_samples_split': 7, 'criterion': 'gini'}\n",
      "Test Accuracy for validation set 2: 0.9033\n",
      "Optimal hyperparameters for validation set 3: {'max_depth': 6, 'min_samples_split': 2, 'criterion': 'entropy'}\n",
      "Test Accuracy for validation set 3: 0.9233\n",
      "Optimal hyperparameters for validation set 4: {'max_depth': 7, 'min_samples_split': 4, 'criterion': 'entropy'}\n",
      "Test Accuracy for validation set 4: 0.9000\n",
      "Optimal hyperparameters for validation set 5: {'max_depth': 6, 'min_samples_split': 2, 'criterion': 'entropy'}\n",
      "Test Accuracy for validation set 5: 0.9233\n"
     ]
    }
   ],
   "source": [
    "# Initialize a list to store the optimal hyperparameters for each validation set\n",
    "optimal_hyperparameters = {}\n",
    "test_accuracies = []\n",
    "\n",
    "# Set the number of subsets and iterations\n",
    "num_subsets = 5\n",
    "\n",
    "# Make a pandas dataframe with columns as the hyperparameters, subset number, and validation accuracy\n",
    "hyperparameters_df = pd.DataFrame(columns=['max_depth', 'min_samples_split', 'criterion', 'subset', 'validation accuracy'])\n",
    "\n",
    "# Iterate over the subsets\n",
    "for i in range(num_subsets):\n",
    "    # Split the data into training and validation sets\n",
    "    X_train_subset, X_val_subset, y_train_subset, y_val_subset = train_test_split(X_train_val, y_train_val, test_size=0.285, random_state=i)\n",
    "    \n",
    "    # Initialize variables to store the best hyperparameters and accuracy for the current subset\n",
    "    best_accuracy = 0\n",
    "    best_hyperparameters = {}\n",
    "    \n",
    "    # Iterate over the hyperparameter values\n",
    "\n",
    "    for max_depth in hyperparameters['max_depth']:\n",
    "        for min_samples_split in hyperparameters['min_samples_split']:\n",
    "            for criterion in hyperparameters['criteria_values']:\n",
    "                # Initialize and train the model with the current hyperparameters\n",
    "                dt_classifier = DecisionTreeClassifier(max_depth=max_depth, min_samples_split=min_samples_split, criterion=criterion, random_state=42)\n",
    "                dt_classifier.fit(X_train_subset, y_train_subset)\n",
    "                \n",
    "                # Evaluate the model on the validation set\n",
    "                val_accuracy = dt_classifier.score(X_val_subset, y_val_subset)\n",
    "                hyperparameters_df.loc[len(hyperparameters_df)] = [max_depth, min_samples_split, criterion, i+1, val_accuracy]\n",
    "                \n",
    "                # Update the best accuracy and hyperparameters\n",
    "                if val_accuracy > best_accuracy:\n",
    "                    best_accuracy = val_accuracy\n",
    "                    best_hyperparameters = {\n",
    "                        'max_depth': max_depth,\n",
    "                        'min_samples_split': min_samples_split,\n",
    "                        'criterion': criterion\n",
    "                    }\n",
    "    \n",
    "    optimal_hyperparameters[i] = best_hyperparameters\n",
    "\n",
    "    # Evaluate the model with the best hyperparameters on the test set\n",
    "    dt_classifier = DecisionTreeClassifier(max_depth=best_hyperparameters['max_depth'], min_samples_split=best_hyperparameters['min_samples_split'], criterion=best_hyperparameters['criterion'], random_state=42)\n",
    "    dt_classifier.fit(X_train_val, y_train_val)\n",
    "    test_accuracy = dt_classifier.score(X_test, y_test)\n",
    "    test_accuracies.append(test_accuracy)\n",
    "\n",
    "\n",
    "\n",
    "print(\"Optimal hyperparameters for {} inner folds/validation sets\".format(num_subsets))\n",
    "print()\n",
    "# Print the optimal hyperparameters for each validation set\n",
    "for i in range(num_subsets):\n",
    "    print(\"Optimal hyperparameters for validation set {}: {}\".format(i+1, optimal_hyperparameters[i]))\n",
    "    print(\"Test Accuracy for validation set {}: {:.4f}\".format(i+1, test_accuracies[i]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max_depth</th>\n",
       "      <th>min_samples_split</th>\n",
       "      <th>criterion</th>\n",
       "      <th>subset</th>\n",
       "      <th>validation accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>gini</td>\n",
       "      <td>1</td>\n",
       "      <td>0.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>gini</td>\n",
       "      <td>1</td>\n",
       "      <td>0.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>entropy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>gini</td>\n",
       "      <td>1</td>\n",
       "      <td>0.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>0.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>696</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>gini</td>\n",
       "      <td>5</td>\n",
       "      <td>0.905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>697</th>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>0.900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>gini</td>\n",
       "      <td>5</td>\n",
       "      <td>0.905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>699</th>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>0.900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>700 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     max_depth  min_samples_split criterion  subset  validation accuracy\n",
       "0            1                  2      gini       1                0.790\n",
       "1            1                  2   entropy       1                0.790\n",
       "2            1                  3      gini       1                0.790\n",
       "3            1                  3   entropy       1                0.790\n",
       "4            1                  4      gini       1                0.790\n",
       "..         ...                ...       ...     ...                  ...\n",
       "695         10                  6   entropy       5                0.900\n",
       "696         10                  7      gini       5                0.905\n",
       "697         10                  7   entropy       5                0.900\n",
       "698         10                  8      gini       5                0.905\n",
       "699         10                  8   entropy       5                0.900\n",
       "\n",
       "[700 rows x 5 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hyperparameters_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "max_depth  min_samples_split  criterion\n",
       "1          2                  entropy      0.769\n",
       "                              gini         0.771\n",
       "           3                  entropy      0.769\n",
       "                              gini         0.771\n",
       "           4                  entropy      0.769\n",
       "                                           ...  \n",
       "10         6                  gini         0.889\n",
       "           7                  entropy      0.902\n",
       "                              gini         0.894\n",
       "           8                  entropy      0.904\n",
       "                              gini         0.893\n",
       "Name: validation accuracy, Length: 140, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_df = hyperparameters_df.groupby(['max_depth', 'min_samples_split', 'criterion']).mean()['validation accuracy']\n",
    "grouped_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "max_depth  min_samples_split  criterion\n",
       "6          7                  entropy      0.914\n",
       "           8                  entropy      0.914\n",
       "7          7                  entropy      0.912\n",
       "6          6                  entropy      0.912\n",
       "7          8                  entropy      0.912\n",
       "           6                  entropy      0.910\n",
       "6          4                  entropy      0.910\n",
       "           5                  entropy      0.910\n",
       "7          4                  entropy      0.909\n",
       "           5                  entropy      0.909\n",
       "Name: validation accuracy, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_df.sort_values(ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 7, 'entropy')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimal_hyperparams = grouped_df.idxmax()\n",
    "optimal_hyperparams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 0.9233\n"
     ]
    }
   ],
   "source": [
    "df_classifier = DecisionTreeClassifier(max_depth=optimal_hyperparams[0], min_samples_split=optimal_hyperparams[1], criterion=optimal_hyperparams[2], random_state=42)\n",
    "df_classifier.fit(X_train_val, y_train_val)\n",
    "test_accuracy = df_classifier.score(X_test, y_test)\n",
    "print(\"Test accuracy: {:.4f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.2 Nested Cross-Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperparameters['max_depth'] = [1,2,3,4,5,6,7,8,9,10]\n",
    "hyperparameters['min_samples_split'] = [2,3,4,5,6,7,8]\n",
    "hyperparameters['criteria_values'] = ['gini', 'entropy']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "****************************************************************************************************\n",
      "Outer Fold 1, Inner Fold 1\n",
      "****************************************************************************************************\n",
      "Outer Fold 1, Inner Fold 2\n",
      "****************************************************************************************************\n",
      "Outer Fold 1, Inner Fold 3\n",
      "****************************************************************************************************\n",
      "Outer Fold 1, Inner Fold 4\n",
      "****************************************************************************************************\n",
      "Outer Fold 1, Inner Fold 5\n",
      "****************************************************************************************************\n",
      "Outer Fold 2, Inner Fold 1\n",
      "****************************************************************************************************\n",
      "Outer Fold 2, Inner Fold 2\n",
      "****************************************************************************************************\n",
      "Outer Fold 2, Inner Fold 3\n",
      "****************************************************************************************************\n",
      "Outer Fold 2, Inner Fold 4\n",
      "****************************************************************************************************\n",
      "Outer Fold 2, Inner Fold 5\n",
      "****************************************************************************************************\n",
      "Outer Fold 3, Inner Fold 1\n",
      "****************************************************************************************************\n",
      "Outer Fold 3, Inner Fold 2\n",
      "****************************************************************************************************\n",
      "Outer Fold 3, Inner Fold 3\n",
      "****************************************************************************************************\n",
      "Outer Fold 3, Inner Fold 4\n",
      "****************************************************************************************************\n",
      "Outer Fold 3, Inner Fold 5\n",
      "****************************************************************************************************\n",
      "Outer Fold 4, Inner Fold 1\n",
      "****************************************************************************************************\n",
      "Outer Fold 4, Inner Fold 2\n",
      "****************************************************************************************************\n",
      "Outer Fold 4, Inner Fold 3\n",
      "****************************************************************************************************\n",
      "Outer Fold 4, Inner Fold 4\n",
      "****************************************************************************************************\n",
      "Outer Fold 4, Inner Fold 5\n",
      "****************************************************************************************************\n",
      "Outer Fold 5, Inner Fold 1\n",
      "****************************************************************************************************\n",
      "Outer Fold 5, Inner Fold 2\n",
      "****************************************************************************************************\n",
      "Outer Fold 5, Inner Fold 3\n",
      "****************************************************************************************************\n",
      "Outer Fold 5, Inner Fold 4\n",
      "****************************************************************************************************\n",
      "Outer Fold 5, Inner Fold 5\n"
     ]
    }
   ],
   "source": [
    "num_outer_folds = 5\n",
    "num_inner_folds = 5\n",
    "\n",
    "kf_outer = KFold(n_splits=num_outer_folds, shuffle=False)\n",
    "kf_inner = KFold(n_splits=num_inner_folds, shuffle=False)\n",
    "\n",
    "# Initialize lists to store the accuracies for the outer and inner loops\n",
    "outer_loop_accuracies = []\n",
    "inner_loop_accuracies = []\n",
    "\n",
    "results= {}\n",
    "outer_count = 0\n",
    "overall_count = 0\n",
    "# Iterate over the outer folds\n",
    "for outer_train_index, outer_test_index in kf_outer.split(X):\n",
    "    # Split the data into outer training and test sets\n",
    "    X_outer_train, X_outer_test = X[outer_train_index], X[outer_test_index]\n",
    "    y_outer_train, y_outer_test = y[outer_train_index], y[outer_test_index]\n",
    "    \n",
    "    \n",
    "    inner_count = 0\n",
    "    \n",
    "    for innner_train_index, inner_test_index in kf_inner.split(X_outer_train):\n",
    "        print(\"*****\"*20)\n",
    "        print(\"Outer Fold {}, Inner Fold {}\".format(outer_count+1, inner_count+1))\n",
    "        # Split the data into inner training and test sets\n",
    "        X_inner_train, X_inner_test = X_outer_train[innner_train_index], X_outer_train[inner_test_index]\n",
    "        y_inner_train, y_inner_test = y_outer_train[innner_train_index], y_outer_train[inner_test_index]\n",
    "        \n",
    "        for max_depth, min_samples_split, criterion in product(hyperparameters['max_depth'],\n",
    "                                                               hyperparameters['min_samples_split'],\n",
    "                                                               hyperparameters['criteria_values']):\n",
    "            \n",
    "            #print(max_depth, min_samples_split, criterion)\n",
    "            # Initialize and train the model with the current hyperparameters\n",
    "            dt_classifier = DecisionTreeClassifier(max_depth=max_depth, \n",
    "                                                   min_samples_split=min_samples_split, \n",
    "                                                   criterion=criterion, random_state=42)\n",
    "            dt_classifier.fit(X_inner_train, y_inner_train)\n",
    "            \n",
    "            # Evaluate the model on the inner test set\n",
    "            val_accuracy = dt_classifier.score(X_inner_test, y_inner_test)\n",
    "            \n",
    "            results[overall_count] = {'outer_fold': outer_count, \n",
    "                                      'inner_fold': inner_count, \n",
    "                                      'max_depth': max_depth, \n",
    "                                      'min_samples_split': min_samples_split, \n",
    "                                      'criterion': criterion, \n",
    "                                      'val_accuracy': val_accuracy}\n",
    "            overall_count += 1\n",
    "\n",
    "        inner_count += 1\n",
    "    outer_count += 1\n",
    "    \n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "overall_results = pd.DataFrame(results).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outer_fold</th>\n",
       "      <th>inner_fold</th>\n",
       "      <th>max_depth</th>\n",
       "      <th>min_samples_split</th>\n",
       "      <th>criterion</th>\n",
       "      <th>val_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3495</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3496</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.91875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3497</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3498</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3499</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3500 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     outer_fold inner_fold max_depth min_samples_split criterion val_accuracy\n",
       "0             0          0         1                 2      gini       0.7625\n",
       "1             0          0         1                 2   entropy       0.7625\n",
       "2             0          0         1                 3      gini       0.7625\n",
       "3             0          0         1                 3   entropy       0.7625\n",
       "4             0          0         1                 4      gini       0.7625\n",
       "...         ...        ...       ...               ...       ...          ...\n",
       "3495          4          4        10                 6   entropy          0.9\n",
       "3496          4          4        10                 7      gini      0.91875\n",
       "3497          4          4        10                 7   entropy          0.9\n",
       "3498          4          4        10                 8      gini        0.925\n",
       "3499          4          4        10                 8   entropy          0.9\n",
       "\n",
       "[3500 rows x 6 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overall_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the best hyperparameters for each outer fold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outer_fold</th>\n",
       "      <th>inner_fold</th>\n",
       "      <th>max_depth</th>\n",
       "      <th>min_samples_split</th>\n",
       "      <th>criterion</th>\n",
       "      <th>val_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.7625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>696</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.86875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>697</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.85625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>698</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>gini</td>\n",
       "      <td>0.86875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>699</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>entropy</td>\n",
       "      <td>0.85625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>700 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    outer_fold inner_fold max_depth min_samples_split criterion val_accuracy\n",
       "0            0          0         1                 2      gini       0.7625\n",
       "1            0          0         1                 2   entropy       0.7625\n",
       "2            0          0         1                 3      gini       0.7625\n",
       "3            0          0         1                 3   entropy       0.7625\n",
       "4            0          0         1                 4      gini       0.7625\n",
       "..         ...        ...       ...               ...       ...          ...\n",
       "695          0          4        10                 6   entropy         0.85\n",
       "696          0          4        10                 7      gini      0.86875\n",
       "697          0          4        10                 7   entropy      0.85625\n",
       "698          0          4        10                 8      gini      0.86875\n",
       "699          0          4        10                 8   entropy      0.85625\n",
       "\n",
       "[700 rows x 6 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outer_fold = 0\n",
    "outer_fold_df = overall_results.query('outer_fold == @outer_fold')\n",
    "outer_fold_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aggregate the validation accuracies for each hyperparameter combination across all inner folds\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "max_depth  min_samples_split  criterion\n",
       "6          7                  gini          0.9175\n",
       "           8                  gini          0.9175\n",
       "           6                  gini          0.9175\n",
       "           4                  gini         0.91625\n",
       "           3                  gini         0.91625\n",
       "           2                  gini         0.91625\n",
       "           5                  gini         0.91625\n",
       "7          6                  gini         0.91625\n",
       "           7                  gini         0.91625\n",
       "           8                  gini           0.915\n",
       "Name: val_accuracy, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outer_fold_df.groupby(['max_depth', 'min_samples_split', 'criterion']).mean()['val_accuracy'].sort_values(ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "MLenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
