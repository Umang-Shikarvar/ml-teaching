{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "---\n",
    "author: Nipun Batra\n",
    "badges: true\n",
    "categories:\n",
    "- ML\n",
    "date: '2024-1-1'\n",
    "title: Decision Trees Real Output\n",
    "toc: true\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "# Retina mode\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "from latexify import latexify, format_axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"../datasets/tennis-real-output.csv\", index_col=[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Outlook</th>\n",
       "      <th>Temp</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind</th>\n",
       "      <th>Minutes Played</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Day</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>D1</th>\n",
       "      <td>Sunny</td>\n",
       "      <td>Hot</td>\n",
       "      <td>High</td>\n",
       "      <td>Weak</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D2</th>\n",
       "      <td>Sunny</td>\n",
       "      <td>Hot</td>\n",
       "      <td>High</td>\n",
       "      <td>Strong</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D3</th>\n",
       "      <td>Overcast</td>\n",
       "      <td>Hot</td>\n",
       "      <td>High</td>\n",
       "      <td>Weak</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D4</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Mild</td>\n",
       "      <td>High</td>\n",
       "      <td>Weak</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D5</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Cool</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Weak</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D6</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Cool</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Strong</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D7</th>\n",
       "      <td>Overcast</td>\n",
       "      <td>Cool</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Strong</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D8</th>\n",
       "      <td>Sunny</td>\n",
       "      <td>Mild</td>\n",
       "      <td>High</td>\n",
       "      <td>Weak</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D9</th>\n",
       "      <td>Sunny</td>\n",
       "      <td>Cool</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Weak</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D10</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Mild</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Weak</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D11</th>\n",
       "      <td>Sunny</td>\n",
       "      <td>Mild</td>\n",
       "      <td>High</td>\n",
       "      <td>Strong</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D12</th>\n",
       "      <td>Overcast</td>\n",
       "      <td>Mild</td>\n",
       "      <td>High</td>\n",
       "      <td>Strong</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D13</th>\n",
       "      <td>Overcast</td>\n",
       "      <td>Hot</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Weak</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D14</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Mild</td>\n",
       "      <td>High</td>\n",
       "      <td>Strong</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Outlook  Temp Humidity    Wind  Minutes Played\n",
       "Day                                                 \n",
       "D1      Sunny   Hot     High    Weak              20\n",
       "D2      Sunny   Hot     High  Strong              24\n",
       "D3   Overcast   Hot     High    Weak              40\n",
       "D4       Rain  Mild     High    Weak              50\n",
       "D5       Rain  Cool   Normal    Weak              60\n",
       "D6       Rain  Cool   Normal  Strong              10\n",
       "D7   Overcast  Cool   Normal  Strong               4\n",
       "D8      Sunny  Mild     High    Weak              10\n",
       "D9      Sunny  Cool   Normal    Weak              60\n",
       "D10      Rain  Mild   Normal    Weak              40\n",
       "D11     Sunny  Mild     High  Strong              45\n",
       "D12  Overcast  Mild     High  Strong              40\n",
       "D13  Overcast   Hot   Normal    Weak              35\n",
       "D14      Rain  Mild     High  Strong              20"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32.714285714285715\n"
     ]
    }
   ],
   "source": [
    "mean_mins = df[\"Minutes Played\"].mean()\n",
    "print(mean_mins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "311.3469387755102\n"
     ]
    }
   ],
   "source": [
    "initial_mse = ((df[\"Minutes Played\"] - mean_mins) ** 2).mean()\n",
    "print(initial_mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20 40 50 60 10 60 40 35]\n",
      "Wind: Weak\n",
      "Subset MSE: 277.734375\n",
      "Weighted MSE = 8/14 * 277.7 = 158.7\n",
      "\n",
      "\n",
      "[24 10  4 45 40 20]\n",
      "Wind: Strong\n",
      "Subset MSE: 218.13888888888889\n",
      "Weighted MSE = 6/14 * 218.1 = 93.49\n",
      "\n",
      "\n",
      "Weighted total MSE: 252.19345238095235\n"
     ]
    }
   ],
   "source": [
    "# Explore MSE for different splits based on the \"Outlook\" attribute\n",
    "weighted_total_mse = 0.0\n",
    "for category in df[\"Wind\"].unique():\n",
    "    subset = df[df[\"Wind\"] == category]\n",
    "    \n",
    "    # Calculate MSE for the subset\n",
    "    mse_subset = ((subset[\"Minutes Played\"] - subset[\"Minutes Played\"].mean()) ** 2).mean()\n",
    "    \n",
    "    # Calculate the weighted MSE\n",
    "    weighted_mse = (len(subset) / len(df)) * mse_subset\n",
    "    weighted_total_mse = weighted_total_mse + weighted_mse\n",
    "    \n",
    "    print(subset[\"Minutes Played\"].values)\n",
    "    print(f\"Wind: {category}\")\n",
    "    print(\"Subset MSE:\", mse_subset)\n",
    "    print(f\"Weighted MSE = {len(subset)}/{len(df)} * {mse_subset:0.4} = {weighted_mse:0.4}\")\n",
    "    print(\"\\n\")\n",
    "\n",
    "print(\"Weighted total MSE:\", weighted_total_mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59.15348639455783\n"
     ]
    }
   ],
   "source": [
    "reduction_mse_wind = initial_mse - weighted_total_mse\n",
    "print(reduction_mse_wind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reduction_mse(df_dataset, input_attribute, target_attribute):\n",
    "    # Calculate the initial MSE\n",
    "    mean_target = df_dataset[target_attribute].mean()\n",
    "    initial_mse = ((df_dataset[target_attribute] - mean_target) ** 2).mean()\n",
    "    weighted_total_mse = 0.0\n",
    "\n",
    "    for category in df_dataset[input_attribute].unique():\n",
    "        subset = df_dataset[df_dataset[input_attribute] == category]\n",
    "        mse_subset = ((subset[target_attribute] - subset[target_attribute].mean()) ** 2).mean()\n",
    "        \n",
    "        weighted_mse = (len(subset) / len(df_dataset)) * mse_subset\n",
    "        weighted_total_mse = weighted_total_mse + weighted_mse\n",
    "    \n",
    "    return initial_mse - weighted_total_mse\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "reduction = {}\n",
    "for attribute in [\"Outlook\", \"Temp\", \"Humidity\", \"Wind\"]:\n",
    "    reduction[attribute] = reduction_mse(df, attribute, \"Minutes Played\")\n",
    "    \n",
    "reduction_ser = pd.Series(reduction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "latexify()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 339x209.514 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 218,
       "width": 319
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bars = reduction_ser.plot(kind='bar', rot=0, color='k')\n",
    "format_axes(plt.gca())\n",
    "\n",
    "# Add values on top of the bars\n",
    "for bar in bars.patches:\n",
    "    yval = bar.get_height()\n",
    "    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')\n",
    "\n",
    "plt.xlabel(\"Attribute\")\n",
    "plt.ylabel(\"Reduction in MSE\")\n",
    "plt.savefig(\"../figures/decision-trees/discrete-input-real-output-level-1.pdf\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
